Challenge --> Response
00000000  --> 00000000
00000001  --> 00000000
00000010  --> 01100110
00000100  --> 01100110
00001000  --> 10111111
00010000  --> 11000110
00100000  --> 00101011
01000000  --> 10001111


(s1.1 x c1) XOR (s1.2 x c2) XOR ... = r1
x * 0 + x * 0 + 
x * 0 = 0

(input @ SECRET) & 1

Truth Tables:           GF(2): Addition Tables          GF(2): Multiplication Tables
┌───┬───┬───┐           ┌───┬───┬───┐                   ┌───┬───┬───┐
│ A │ B │ Q │           │ + │ 0 │ 1 │                   │ × │ 0 │ 1 │
├───┼───┼───┤           ├───┼───┼───┤                   ├───┼───┼───┤
│ 0 │ 0 │ 0 │           │ 0 │ 0 │ 1 │                   │ 0 │ 0 │ 0 │
├───┼───┼───┤           ├───┼───┼───┤                   ├───┼───┼───┤
│ 0 │ 1 │ 1 │           │ 1 │ 1 │ 0 │                   │ 1 │ 0 │ 1 │
├───┼───┼───┤           └───┴───┴───┘                   └───┴───┴───┘
│ 1 │ 0 │ 1 │                XOR
├───┼───┼───┤
│ 1 │ 1 │ 0 │
└───┴───┴───┘

101 ^ 100110 = 100011
100110 ^ 10011 = 101

def xor(binary_1, binary_2):
    binary_1 = int(str(binary_1), 2)
    binary_2 = int(str(binary_2), 2)
    result = bin(binary_1 ^ binary_2)
    return result



How to use:
"""
=============
Challenge Me!
=============
Challenge Me #01 <-- 00000010
00000010
My Response --> 10000000

Challenge Me #02 <-- 00000010
My Response --> 10000000
Challenge Me #03 <-- 
"""